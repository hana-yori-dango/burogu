<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Cluzeau - cqrs</title>
    <link href="https://cluzeau.pro/tags/cqrs/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="https://cluzeau.pro"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2023-04-03T00:00:00+00:00</updated>
    <id>https://cluzeau.pro/tags/cqrs/atom.xml</id>
    <entry xml:lang="en">
        <title>Domain Driven Design example</title>
        <published>2023-04-03T00:00:00+00:00</published>
        <updated>2023-04-03T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://cluzeau.pro/ddd-example/" type="text/html"/>
        <id>https://cluzeau.pro/ddd-example/</id>
        
        <content type="html">&lt;p&gt;Code can be found at: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aurelien-clu&#x2F;example-ddd-es&#x2F;tree&#x2F;main&#x2F;rust-cqrs&quot;&gt;github.com&#x2F;aurelien-clu&#x2F;example-ddd-es&#x2F;rust-cqrs&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;our-objectives&quot;&gt;Our objectives&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s create an API controlling a &lt;code&gt;Plane&lt;&#x2F;code&gt;. We want to be able to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;fly it&lt;&#x2F;li&gt;
&lt;li&gt;land it&lt;&#x2F;li&gt;
&lt;li&gt;change its position&lt;&#x2F;li&gt;
&lt;li&gt;track all past positions for the current or previous journey&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For such simple needs, a &lt;code&gt;CRUD API&lt;&#x2F;code&gt; would suffice but for the sake of learning we will use &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Domain-driven_design&quot;&gt;DDD&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Event-driven_architecture&quot;&gt;event-sourcing&lt;&#x2F;a&gt; &amp;amp; &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Command%E2%80%93query_separation#Command_Query_Responsibility_Segregation&quot;&gt;CQRS&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;event-storming&quot;&gt;Event storming&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Event storming is a workshop-based method to quickly find out what is happening in the domain of a software program. Compared to other methods it is extremely lightweight and intentionally requires no support by a computer. The result is expressed in sticky notes on a wide wall.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Event_storming&quot;&gt;wikipedia.org&#x2F;Event storming&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We will follow the following steps:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Collect domain events&lt;&#x2F;li&gt;
&lt;li&gt;Refine domain events&lt;&#x2F;li&gt;
&lt;li&gt;Track causes&lt;&#x2F;li&gt;
&lt;li&gt;Find aggregates&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;We end up with the following:&lt;&#x2F;p&gt;
&lt;img src=&quot;https:&#x2F;&#x2F;cluzeau.pro&#x2F;ddd-example-plane.jpg&quot; alt= &quot;event storming&quot; width=&quot;30%&quot; height=&quot;30%&quot;&#x2F;&gt;
&lt;p&gt;&lt;em&gt;Graph made using: &lt;a href=&quot;https:&#x2F;&#x2F;miro.com&#x2F;miroverse&#x2F;event-storming&#x2F;&quot;&gt;miro.com&#x2F;miroverse&#x2F;event-storming&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Notes:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Event storming should be done with domain experts, I am not an expert in aviation, thus this is incomplete but sufficient for this example :)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;OnGround&lt;&#x2F;em&gt; event is not necessarily following &lt;em&gt;PlaneRegistered&lt;&#x2F;em&gt; but happens at the same time. It makes more sense to have an event describing that the plane is on ground without knowing whether the plane has flew before or not while registering (an alternative could be to default a plane to be on ground and remove &lt;em&gt;OnGround&lt;&#x2F;em&gt; event).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;let-s-code-it&quot;&gt;Let&#x27;s code it&lt;&#x2F;h2&gt;
&lt;p&gt;Below you will find code samples, full code can be found here: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aurelien-clu&#x2F;example-ddd-es&#x2F;tree&#x2F;main&#x2F;rust-cqrs&quot;&gt;github.com&#x2F;aurelien-clu&#x2F;example-ddd-es&#x2F;rust-cqrs&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;which-library&quot;&gt;Which library?&lt;&#x2F;h3&gt;
&lt;p&gt;We want a &lt;code&gt;rust&lt;&#x2F;code&gt; library to help us with &lt;code&gt;DDD&lt;&#x2F;code&gt;, &lt;code&gt;event-sourcing&lt;&#x2F;code&gt; &amp;amp; &lt;code&gt;CQRS&lt;&#x2F;code&gt;. &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;serverlesstechnology&#x2F;cqrs&quot;&gt;github.com&#x2F;serverlesstechnology&#x2F;cqrs&lt;&#x2F;a&gt; fits our needs.&lt;&#x2F;p&gt;
&lt;p&gt;Reasons to use it:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;great documentation: &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-cqrs.org&#x2F;&quot;&gt;doc.rust-cqrs.org&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;ease of use&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Reasons not to use it:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;aggregate ids have to be &lt;code&gt;Strings&lt;&#x2F;code&gt;, we could want to use &lt;code&gt;UUID&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;maybe less feature complete than &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;get-eventually&#x2F;eventually-rs&quot;&gt;github.com&#x2F;get-eventually&#x2F;eventually-rs&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;not &lt;code&gt;wasm&lt;&#x2F;code&gt; if you have reasons to need this, then go with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;thalo-rs&#x2F;thalo&quot;&gt;github.com&#x2F;thalo-rs&#x2F;thalo&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;setup&quot;&gt;Setup&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span&gt; Cargo.toml
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span&gt; crates
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span&gt;   ├── domain-plane
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span&gt;   └── server
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span&gt; db
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span&gt;   └── init.sql
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span&gt; docker-compose.yml
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;└──&lt;&#x2F;span&gt;&lt;span&gt; test
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;└──&lt;&#x2F;span&gt;&lt;span&gt; test_api_plane.sh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We need to have a crate for our &lt;code&gt;plane domain&lt;&#x2F;code&gt; and another for our &lt;code&gt;server&lt;&#x2F;code&gt;.
By separating &lt;code&gt;domain&lt;&#x2F;code&gt; from &lt;code&gt;server&lt;&#x2F;code&gt; (and other &lt;code&gt;infrastructure&lt;&#x2F;code&gt; concerns we adhere to &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Hexagonal_architecture_(software)&quot;&gt;wikipedia.org&#x2F;Hexagonal architecture&lt;&#x2F;a&gt;)&lt;&#x2F;p&gt;
&lt;h4 id=&quot;cargo-toml&quot;&gt;&lt;strong&gt;Cargo.toml&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[workspace]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;members &lt;&#x2F;span&gt;&lt;span&gt;= [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;crates&#x2F;*&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;crates&quot;&gt;&lt;strong&gt;crates&#x2F;&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span&gt; new crates&#x2F;domain-plane&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --lib
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span&gt; new crates&#x2F;server
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;docker-compose-yml&quot;&gt;&lt;strong&gt;docker-compose.yml&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;To store our events and our &lt;code&gt;queries&lt;&#x2F;code&gt; (views on our aggregate) we will need a database, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;serverlesstechnology&#x2F;cqrs&quot;&gt;github.com&#x2F;serverlesstechnology&#x2F;cqrs&lt;&#x2F;a&gt; works with &lt;code&gt;PostgreSQL&lt;&#x2F;code&gt; &amp;amp; few other &lt;code&gt;databases&lt;&#x2F;code&gt;. &lt;code&gt;PostgreSQL&lt;&#x2F;code&gt; being my go to database, we will use it. (it is also the one in the demo project, let&#x27;s keep it simple)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;3.1&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;services&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cqrs-postgres-db&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;postgres
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;restart&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;always
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ports&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;5432:5432
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;environment&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;POSTGRES_DB&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;demo
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;POSTGRES_USER&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;demo_user
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;POSTGRES_PASSWORD&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;demo_pass
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;volumes&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;db:&#x2F;docker-entrypoint-initdb.d&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;db-init-sql&quot;&gt;&lt;strong&gt;db&#x2F;init.sql&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;We need to store our events and create a database user:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;CREATE TABLE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;events
&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    aggregate_type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;text                         &lt;&#x2F;span&gt;&lt;span&gt;NOT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    aggregate_id   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;text                         &lt;&#x2F;span&gt;&lt;span&gt;NOT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    sequence       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bigint CHECK&lt;&#x2F;span&gt;&lt;span&gt; (sequence &amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) NOT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    event_type     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;text                         &lt;&#x2F;span&gt;&lt;span&gt;NOT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    event_version  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;text                         &lt;&#x2F;span&gt;&lt;span&gt;NOT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    payload        json                         NOT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    metadata       json                         NOT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;PRIMARY KEY&lt;&#x2F;span&gt;&lt;span&gt; (aggregate_type, aggregate_id, sequence)
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;CREATE USER &lt;&#x2F;span&gt;&lt;span&gt;demo_user WITH ENCRYPTED PASSWORD &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;demo_pass&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;GRANT&lt;&#x2F;span&gt;&lt;span&gt; ALL PRIVILEGES ON DATABASE postgres TO demo_user;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;events&quot;&gt;Events&lt;&#x2F;h3&gt;
&lt;p&gt;From our &lt;code&gt;event storming&lt;&#x2F;code&gt; session, we need to have the following events:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;serde::{Deserialize, Serialize};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug, Clone, Serialize, Deserialize, PartialEq)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span&gt;Event {
&lt;&#x2F;span&gt;&lt;span&gt;    Registered { registration_id: String },
&lt;&#x2F;span&gt;&lt;span&gt;    OnGround,
&lt;&#x2F;span&gt;&lt;span&gt;    TookOff,
&lt;&#x2F;span&gt;&lt;span&gt;    Landed,
&lt;&#x2F;span&gt;&lt;span&gt;    PositionedAt {
&lt;&#x2F;span&gt;&lt;span&gt;        latitude: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        longitude: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        altitude: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;they will be serialized as &lt;code&gt;json&lt;&#x2F;code&gt; in the database (column &lt;code&gt;payload&lt;&#x2F;code&gt;) thus we need to make them serializable.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;commands&quot;&gt;Commands&lt;&#x2F;h3&gt;
&lt;p&gt;And also the following commands:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;serde::Deserialize;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug, Deserialize)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span&gt;Command {
&lt;&#x2F;span&gt;&lt;span&gt;    Register {
&lt;&#x2F;span&gt;&lt;span&gt;        registration_id: String,
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    UpdatePosition {
&lt;&#x2F;span&gt;&lt;span&gt;        latitude: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        longitude: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        altitude: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    TakeOff,
&lt;&#x2F;span&gt;&lt;span&gt;    Land,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;They will be &lt;code&gt;Deserialized&lt;&#x2F;code&gt; from &lt;code&gt;http&lt;&#x2F;code&gt; queries, so it is not needed by our &lt;code&gt;domain-plane&lt;&#x2F;code&gt; crate but will be useful by the &lt;code&gt;server&lt;&#x2F;code&gt; crate.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;errors&quot;&gt;Errors&lt;&#x2F;h3&gt;
&lt;p&gt;Commands may not always return successfully, and some errors can be expected and returned.
We create an &lt;code&gt;enum&lt;&#x2F;code&gt; with all possible errors and define a message associated to each (&lt;code&gt;#[error(&amp;quot;&amp;lt;MSG&amp;gt;&amp;quot;)]&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;Usually this will be updated while implementing the aggregate. To fasten the reading, here are all of our error cases.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(thiserror::Error, Clone, Debug, PartialEq)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span&gt;Error {
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Unable to take off in curent state&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span&gt;    CannotTakeOff,
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Unable to land in current state&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span&gt;    CannotLand,
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Cannot register again, identification is immutable&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span&gt;    AlreadyRegistered,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note: &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;thiserror&#x2F;latest&#x2F;thiserror&#x2F;&quot;&gt;docs.rs&#x2F;thiserror&#x2F;latest&#x2F;thiserror&#x2F;&lt;&#x2F;a&gt; reduces the boilerplate around error definitions.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;aggregate&quot;&gt;Aggregate&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;state&quot;&gt;&lt;strong&gt;State&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Let&#x27;s define our &lt;code&gt;Plane&lt;&#x2F;code&gt; state. We want it to have:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;an identification (relating to its domain -&amp;gt; &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Aircraft_registration&quot;&gt;wikipedia.org&#x2F;Aircraft_registration&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;a last known position&lt;&#x2F;li&gt;
&lt;li&gt;a flying status&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Serialize, Deserialize, Debug, Clone, PartialEq)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;Position {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;latitude&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;longitude&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;altitude&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Serialize, Deserialize, Default, Debug, Clone, PartialEq)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span&gt;Status {
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    OnGround,
&lt;&#x2F;span&gt;&lt;span&gt;    InAir,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Serialize, Deserialize)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;Plane {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;registration_id&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;last_position&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;Position&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;status&lt;&#x2F;span&gt;&lt;span&gt;: Status,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Default &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;Plane {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            registration_id: &amp;quot;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;            last_position: None,
&lt;&#x2F;span&gt;&lt;span&gt;            status: OnGround,
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We then need to be able to build a &lt;code&gt;Plane&lt;&#x2F;code&gt; state based on past events:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;event&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Event) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; event {
&lt;&#x2F;span&gt;&lt;span&gt;        Event::Registered { registration_id } =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.registration_id = registration_id,
&lt;&#x2F;span&gt;&lt;span&gt;        Event::PositionedAt {
&lt;&#x2F;span&gt;&lt;span&gt;            latitude,
&lt;&#x2F;span&gt;&lt;span&gt;            longitude,
&lt;&#x2F;span&gt;&lt;span&gt;            altitude,
&lt;&#x2F;span&gt;&lt;span&gt;        } =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; p = Position {
&lt;&#x2F;span&gt;&lt;span&gt;                latitude,
&lt;&#x2F;span&gt;&lt;span&gt;                longitude,
&lt;&#x2F;span&gt;&lt;span&gt;                altitude,
&lt;&#x2F;span&gt;&lt;span&gt;            };
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.last_position = Some(p);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        Event::TookOff =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.status = Status::InAir,
&lt;&#x2F;span&gt;&lt;span&gt;        Event::Landed =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.status = Status::OnGround,
&lt;&#x2F;span&gt;&lt;span&gt;        Event::OnGround =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.status = Status::OnGround,
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;command-handler&quot;&gt;&lt;strong&gt;Command handler&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;We have a &lt;code&gt;Plane&lt;&#x2F;code&gt; that can be constructed with past events but we have no way of creating events.&lt;&#x2F;p&gt;
&lt;p&gt;That where the &lt;code&gt;handle&lt;&#x2F;code&gt; function comes in, it will translate successful commands into events:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;handle&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Command,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_services&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Services,
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Event&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Error&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; command {
&lt;&#x2F;span&gt;&lt;span&gt;        Command::Register { registration_id } =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.registration_id != &amp;quot;&amp;quot; {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;Err(Error::AlreadyRegistered);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            Ok(vec![Event::Registered { registration_id }, Event::OnGround])
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        Command::UpdatePosition {
&lt;&#x2F;span&gt;&lt;span&gt;            latitude,
&lt;&#x2F;span&gt;&lt;span&gt;            longitude,
&lt;&#x2F;span&gt;&lt;span&gt;            altitude,
&lt;&#x2F;span&gt;&lt;span&gt;        } =&amp;gt; Ok(vec![Event::PositionedAt {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; here we should validate that coordinates are valid
&lt;&#x2F;span&gt;&lt;span&gt;            latitude,
&lt;&#x2F;span&gt;&lt;span&gt;            longitude,
&lt;&#x2F;span&gt;&lt;span&gt;            altitude,
&lt;&#x2F;span&gt;&lt;span&gt;        }]),
&lt;&#x2F;span&gt;&lt;span&gt;        Command::TakeOff =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.status == Status::OnGround {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; here we should call the TowerControl service to ensure we can takeoff
&lt;&#x2F;span&gt;&lt;span&gt;                Ok(vec![Event::TookOff])
&lt;&#x2F;span&gt;&lt;span&gt;            } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                Err(Error::CannotTakeOff)
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        Command::Land =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.status == Status::InAir {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; here we should call the TowerControl service to ensure we can land
&lt;&#x2F;span&gt;&lt;span&gt;                Ok(vec![Event::Landed])
&lt;&#x2F;span&gt;&lt;span&gt;            } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                Err(Error::CannotLand)
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aurelien-clu&#x2F;example-ddd-es&#x2F;blob&#x2F;main&#x2F;rust-cqrs&#x2F;crates&#x2F;domain-plane&#x2F;src&#x2F;domain&#x2F;aggregate.rs&quot;&gt;rust-cqrs&#x2F;crates&#x2F;domain-plane&#x2F;src&#x2F;domain&#x2F;aggregate.rs&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;services&quot;&gt;&lt;strong&gt;Services&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Our aggregate &lt;code&gt;Plane&lt;&#x2F;code&gt; can do some things on its own but for others it should be working with a &lt;code&gt;Control Tower&lt;&#x2F;code&gt; service.&lt;&#x2F;p&gt;
&lt;p&gt;In this example, we are not going to implement a &amp;quot;real&amp;quot; or a mocked version.&lt;&#x2F;p&gt;
&lt;p&gt;Know that we could define a &lt;code&gt;trait&lt;&#x2F;code&gt; within the &lt;code&gt;domain-plane&lt;&#x2F;code&gt; crate and have a &lt;code&gt;svc-tower-control&lt;&#x2F;code&gt; crate, for instance, implementing the &lt;code&gt;trait&lt;&#x2F;code&gt;. It would for instance ensure that no other planes are currently landing or departing whenever a plane asks to land or take off.&lt;&#x2F;p&gt;
&lt;p&gt;Services may be covered in future post, stay tuned!&lt;&#x2F;p&gt;
&lt;h4 id=&quot;tests&quot;&gt;&lt;strong&gt;Tests&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;How to ensure that everything is working properly? Let&#x27;s test the aggregate with the following:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;a plane can be registered&lt;&#x2F;li&gt;
&lt;li&gt;a plane can update its position&lt;&#x2F;li&gt;
&lt;li&gt;a plane can take off if it is on ground&lt;&#x2F;li&gt;
&lt;li&gt;a plane can land if it is airborne&lt;&#x2F;li&gt;
&lt;li&gt;a plane cannot land if already on ground&lt;&#x2F;li&gt;
&lt;li&gt;a plane cannot take off if already airborne&lt;&#x2F;li&gt;
&lt;li&gt;a plane cannot register once it is registered&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Example of a test, following &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Behavior-driven_development&quot;&gt;wikipedia.org&#x2F;Behavior driven development&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;test_a_plane_should_land&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; past = vec![
&lt;&#x2F;span&gt;&lt;span&gt;        Event::Registered {
&lt;&#x2F;span&gt;&lt;span&gt;            registration_id: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;F-TEST&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;        Event::OnGround,
&lt;&#x2F;span&gt;&lt;span&gt;        Event::TookOff,
&lt;&#x2F;span&gt;&lt;span&gt;    ];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; command = Command::Land;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; expected = vec![Event::Landed];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; services = ();
&lt;&#x2F;span&gt;&lt;span&gt;    PlaneTestFramework::with(services)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;given&lt;&#x2F;span&gt;&lt;span&gt;(past)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;when&lt;&#x2F;span&gt;&lt;span&gt;(command)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;then_expect_events&lt;&#x2F;span&gt;&lt;span&gt;(expected);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aurelien-clu&#x2F;example-ddd-es&#x2F;blob&#x2F;main&#x2F;rust-cqrs&#x2F;crates&#x2F;domain-plane&#x2F;src&#x2F;domain&#x2F;tests.rs&quot;&gt;rust-cqrs&#x2F;crates&#x2F;domain-plane&#x2F;src&#x2F;domain&#x2F;tests.rs&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We verify everything works as expected with:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span&gt; test
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;queries&quot;&gt;Queries&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;track for the current or previous journey, all past positions&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;With &lt;code&gt;Command Query Responsibility Segregation&lt;&#x2F;code&gt; (CQRS) we should access past events with a &amp;quot;Query&amp;quot;.&lt;&#x2F;p&gt;
&lt;p&gt;With our chosen library this means that we build a query over past event for our aggregate and as events happen, we will update the state of our query.&lt;&#x2F;p&gt;
&lt;p&gt;Our &lt;code&gt;CurrentJourneyView&lt;&#x2F;code&gt; will track in its state the past &lt;code&gt;positions&lt;&#x2F;code&gt; so we don&#x27;t need to access directly the event log whenever we want this information, we will look up our new query table (cf below).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug, Default, Serialize, Deserialize)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;CurrentJourneyView {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;registration_id&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;status&lt;&#x2F;span&gt;&lt;span&gt;: Status,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;positions&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;Position&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub type &lt;&#x2F;span&gt;&lt;span&gt;CurrentJourneyQuery =
&lt;&#x2F;span&gt;&lt;span&gt;    GenericQuery&amp;lt;PostgresViewRepository&amp;lt;CurrentJourneyView, Plane&amp;gt;, CurrentJourneyView, Plane&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;View&amp;lt;Plane&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;CurrentJourneyView {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;event&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;EventEnvelope&amp;lt;Plane&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;event.payload {
&lt;&#x2F;span&gt;&lt;span&gt;            Event::Registered { registration_id } =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.registration_id = registration_id.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;            Event::OnGround =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.status = Status::OnGround,
&lt;&#x2F;span&gt;&lt;span&gt;            Event::TookOff =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.status = Status::InAir;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.positions.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clear&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            Event::Landed =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.status = Status::OnGround,
&lt;&#x2F;span&gt;&lt;span&gt;            Event::PositionedAt {
&lt;&#x2F;span&gt;&lt;span&gt;                latitude,
&lt;&#x2F;span&gt;&lt;span&gt;                longitude,
&lt;&#x2F;span&gt;&lt;span&gt;                altitude,
&lt;&#x2F;span&gt;&lt;span&gt;            } =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.positions.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(Position {
&lt;&#x2F;span&gt;&lt;span&gt;                latitude: *latitude,
&lt;&#x2F;span&gt;&lt;span&gt;                longitude: *longitude,
&lt;&#x2F;span&gt;&lt;span&gt;                altitude: *altitude,
&lt;&#x2F;span&gt;&lt;span&gt;            }),
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aurelien-clu&#x2F;example-ddd-es&#x2F;blob&#x2F;main&#x2F;rust-cqrs&#x2F;crates&#x2F;domain-plane&#x2F;src&#x2F;queries&#x2F;current_journey.rs&quot;&gt;rust-cqrs&#x2F;crates&#x2F;domain-plane&#x2F;src&#x2F;queries&#x2F;current_journey.rs&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s update the &lt;code&gt;init.sql&lt;&#x2F;code&gt; with our new query:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;CREATE TABLE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;plane_current_journey_query
&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    view_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;text                        &lt;&#x2F;span&gt;&lt;span&gt;NOT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    version           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bigint CHECK&lt;&#x2F;span&gt;&lt;span&gt; (version &amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) NOT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    payload           json                        NOT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;PRIMARY KEY&lt;&#x2F;span&gt;&lt;span&gt; (view_id)
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;server&quot;&gt;Server&lt;&#x2F;h3&gt;
&lt;p&gt;Let&#x27;s use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tokio-rs&#x2F;axum&quot;&gt;github.com&#x2F;tokio-rs&#x2F;axum&lt;&#x2F;a&gt; for our server:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tokio&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; pool = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;default_postgress_pool&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;postgresql:&#x2F;&#x2F;demo_user:demo_pass@localhost:5432&#x2F;demo&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).await;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; we setup and get ownership of our aggregate and query
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(cqrs, current_journey_query) = domain_plane::config::cqrs_framework(pool);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; router = Router::new()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;route&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;plane&#x2F;:registration_id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(routes::plane::query_handler).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span&gt;(routes::plane::command_handler),
&lt;&#x2F;span&gt;&lt;span&gt;        )
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; we use axum extensions to provide:
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;layer&lt;&#x2F;span&gt;&lt;span&gt;(Extension(cqrs)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; - our aggregate to our command_handler
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;layer&lt;&#x2F;span&gt;&lt;span&gt;(Extension(current_journey_query)); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; - our current_journey_query to our query_handler
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    axum::Server::bind(&amp;amp;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.0.0.0:3030&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;serve&lt;&#x2F;span&gt;&lt;span&gt;(router.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into_make_service&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;        .await
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aurelien-clu&#x2F;example-ddd-es&#x2F;blob&#x2F;main&#x2F;rust-cqrs&#x2F;crates&#x2F;server&#x2F;src&#x2F;main.rs&quot;&gt;rust-cqrs&#x2F;crates&#x2F;server&#x2F;src&#x2F;main.rs&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;queries-1&quot;&gt;&lt;strong&gt;Queries&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;We lookup our query for the given &lt;code&gt;registration_id&lt;&#x2F;code&gt; and return the response as &lt;code&gt;json&lt;&#x2F;code&gt; or an error.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;query_handler&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    Path(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;registration_id&lt;&#x2F;span&gt;&lt;span&gt;): Path&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    Extension(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;view_repo&lt;&#x2F;span&gt;&lt;span&gt;): Extension&amp;lt;Arc&amp;lt;PostgresViewRepository&amp;lt;CurrentJourneyView, Plane&amp;gt;&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Response {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; view = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; view_repo.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;registration_id).await {
&lt;&#x2F;span&gt;&lt;span&gt;        Ok(view) =&amp;gt; view,
&lt;&#x2F;span&gt;&lt;span&gt;        Err(err) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(StatusCode::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;INTERNAL_SERVER_ERROR&lt;&#x2F;span&gt;&lt;span&gt;, err.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into_response&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; view {
&lt;&#x2F;span&gt;&lt;span&gt;        None =&amp;gt; StatusCode::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NOT_FOUND&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into_response&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        Some(account_view) =&amp;gt; (StatusCode::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;OK&lt;&#x2F;span&gt;&lt;span&gt;, Json(account_view)).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into_response&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;commands-1&quot;&gt;&lt;strong&gt;Commands&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;We receive a command as &lt;code&gt;json&lt;&#x2F;code&gt; and apply it to the aggregate matching the &lt;code&gt;registration_id&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Commands don&#x27;t return data (cf &lt;code&gt;CQRS&lt;&#x2F;code&gt;) but a simple &lt;code&gt;204 NO CONTENT&lt;&#x2F;code&gt; successful response or an error.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;command_handler&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    Path(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;registration_id&lt;&#x2F;span&gt;&lt;span&gt;): Path&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    Extension(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cqrs&lt;&#x2F;span&gt;&lt;span&gt;): Extension&amp;lt;Arc&amp;lt;PostgresCqrs&amp;lt;Plane&amp;gt;&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    MetadataExtension(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;): MetadataExtension,
&lt;&#x2F;span&gt;&lt;span&gt;    Json(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;): Json&amp;lt;Command&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Response {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; cqrs
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;execute_with_metadata&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;registration_id, command, metadata)
&lt;&#x2F;span&gt;&lt;span&gt;        .await
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        Ok(_) =&amp;gt; StatusCode::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NO_CONTENT&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into_response&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        Err(err) =&amp;gt; (StatusCode::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;BAD_REQUEST&lt;&#x2F;span&gt;&lt;span&gt;, err.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into_response&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;tests-1&quot;&gt;Tests&lt;&#x2F;h3&gt;
&lt;p&gt;Let&#x27;s see if our &lt;code&gt;API&lt;&#x2F;code&gt; works properly!&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RANDOM&lt;&#x2F;span&gt;&lt;span&gt;=$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TEST_ACCT&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test-plane-&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RANDOM&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TEST_URL&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;localhost:3030&#x2F;plane&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TEST_ACCT&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;***************************&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;* Plane: &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TEST_ACCT&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;***************************&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Registering plane&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;curl --location --request&lt;&#x2F;span&gt;&lt;span&gt; POST $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TEST_URL --header &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Content-Type: application&#x2F;json&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --data-raw &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Register&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;registration_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TEST_ACCT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-e &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;\nUpdating position&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;curl --location --request&lt;&#x2F;span&gt;&lt;span&gt; POST $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TEST_URL --header &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Content-Type: application&#x2F;json&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --data-raw &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;UpdatePosition&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;latitude&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;: 1.0, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;longitude&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;: 2.0, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;altitude&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;: 0 }}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# [...]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aurelien-clu&#x2F;example-ddd-es&#x2F;blob&#x2F;main&#x2F;rust-cqrs&#x2F;test&#x2F;test_api_plane.sh&quot;&gt;rust-cqrs&#x2F;test&#x2F;test_api_plane.sh&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# terminal 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;docker-compose&lt;&#x2F;span&gt;&lt;span&gt; up&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -d
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span&gt; run
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# terminal 2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.&#x2F;test&#x2F;test_api_plane.sh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;expected-terminal-1-output&quot;&gt;&lt;strong&gt;Expected terminal 1 output&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aurelien-clu&#x2F;example-ddd-es&#x2F;blob&#x2F;main&#x2F;rust-cqrs&#x2F;crates&#x2F;domain-plane&#x2F;src&#x2F;queries&#x2F;logger.rs&quot;&gt;rust-cqrs&#x2F;crates&#x2F;domain-plane&#x2F;src&#x2F;queries&#x2F;logger.rs&lt;&#x2F;a&gt; logs every &lt;code&gt;Plane&lt;&#x2F;code&gt; events, useful for debugging.&lt;&#x2F;p&gt;
&lt;p&gt;Format:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;id: &#x27;{{Aggregate ID}}&#x27;, sequence: {{Event number for the given aggregate}}&lt;&#x2F;p&gt;
&lt;p&gt;{{event as a JSON unless the event contains no data (e.g. &amp;quot;OnGround&amp;quot;)}}&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;******************************************************
&lt;&#x2F;span&gt;&lt;span&gt;id: &amp;#39;test-plane-27355&amp;#39;, sequence: 1
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;Registered&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;registration_id&amp;quot;: &amp;quot;test-plane-27355&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;******************************************************
&lt;&#x2F;span&gt;&lt;span&gt;id: &amp;#39;test-plane-27355&amp;#39;, sequence: 2
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;OnGround&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;******************************************************
&lt;&#x2F;span&gt;&lt;span&gt;id: &amp;#39;test-plane-27355&amp;#39;, sequence: 3
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;PositionedAt&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;latitude&amp;quot;: 1.0,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;longitude&amp;quot;: 2.0,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;altitude&amp;quot;: 0
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;******************************************************
&lt;&#x2F;span&gt;&lt;span&gt;id: &amp;#39;test-plane-27355&amp;#39;, sequence: 4
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;TookOff&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;******************************************************
&lt;&#x2F;span&gt;&lt;span&gt;id: &amp;#39;test-plane-27355&amp;#39;, sequence: 5
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;PositionedAt&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;latitude&amp;quot;: 10.0,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;longitude&amp;quot;: 20.0,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;altitude&amp;quot;: 10
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;******************************************************
&lt;&#x2F;span&gt;&lt;span&gt;id: &amp;#39;test-plane-27355&amp;#39;, sequence: 6
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;PositionedAt&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;latitude&amp;quot;: 11.0,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;longitude&amp;quot;: 21.0,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;altitude&amp;quot;: 20
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;******************************************************
&lt;&#x2F;span&gt;&lt;span&gt;id: &amp;#39;test-plane-27355&amp;#39;, sequence: 7
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;Landed&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;expected-terminal-2-output&quot;&gt;&lt;strong&gt;Expected terminal 2 output&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;The journey shows the plane&#x27;s status and the current or last journey positions (history is cleared upon take off)&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;***************************
&lt;&#x2F;span&gt;&lt;span&gt;* Plane: test-plane-27355
&lt;&#x2F;span&gt;&lt;span&gt;***************************
&lt;&#x2F;span&gt;&lt;span&gt;Registering plane
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Updating position
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Prepare for take off!
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Updating position
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Journey
&lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;registration_id&amp;quot;:&amp;quot;test-plane-27355&amp;quot;,&amp;quot;status&amp;quot;:&amp;quot;InAir&amp;quot;,&amp;quot;positions&amp;quot;:[{&amp;quot;latitude&amp;quot;:10.0,&amp;quot;longitude&amp;quot;:20.0,&amp;quot;altitude&amp;quot;:10}]}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Updating position
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Prepare for usual landing!
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Journey
&lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;registration_id&amp;quot;:&amp;quot;test-plane-27355&amp;quot;,&amp;quot;status&amp;quot;:&amp;quot;OnGround&amp;quot;,&amp;quot;positions&amp;quot;:[{&amp;quot;latitude&amp;quot;:10.0,&amp;quot;longitude&amp;quot;:20.0,&amp;quot;altitude&amp;quot;:10},{&amp;quot;latitude&amp;quot;:11.0,&amp;quot;longitude&amp;quot;:21.0,&amp;quot;altitude&amp;quot;:20}]}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;links&quot;&gt;Links&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Domain-driven_design&quot;&gt;wikipedia.org&#x2F;domain driven design&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;martinfowler.com&#x2F;tags&#x2F;domain%20driven%20design.html&quot;&gt;martinfowler.com&#x2F;tags&#x2F;domain driven design&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Event-driven_architecture&quot;&gt;event sourcing&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Command%E2%80%93query_separation#Command_Query_Responsibility_Segregation&quot;&gt;command query responsibility segregation&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;books
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kalele.io&#x2F;books&#x2F;&quot;&gt;Implementing DDD&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kalele.io&#x2F;books&#x2F;&quot;&gt;DDD Distilled&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
</feed>
